#include <algorithm>
#include <iostream>
#include <string>

std::string addBaseB(const std::string& num1, const std::string& num2, int B) {
  std::string n1 = num1, n2 = num2;

  // Make the two strings of equal length by prepending zeros
  while (n1.length() < n2.length()) n1 = "0" + n1;
  while (n2.length() < n1.length()) n2 = "0" + n2;

  std::string result = "";
  int carry = 0;

  for (int i = n1.length() - 1; i >= 0; i--) {
    int digit1 = n1[i] - '0';
    int digit2 = n2[i] - '0';

    int sum = digit1 + digit2 + carry;

    carry = sum / B;
    sum %= B;

    result = std::to_string(sum) + result;
  }

  if (carry > 0) {
    result = std::to_string(carry) + result;
  }

  return result;
}

std::string subtractBaseB(const std::string& num1, const std::string& num2,
                          int B) {
  std::string n1 = num1, n2 = num2;

  // Make the two strings of equal length by prepending zeros
  while (n1.length() < n2.length()) n1 = "0" + n1;
  while (n2.length() < n1.length()) n2 = "0" + n2;

  std::string result = "";
  int borrow = 0;

  for (int i = n1.length() - 1; i >= 0; i--) {
    int digit1 = n1[i] - '0';
    int digit2 = n2[i] - '0';

    int diff = digit1 - digit2 - borrow;

    if (diff < 0) {
      diff += B;
      borrow = 1;
    } else {
      borrow = 0;
    }

    result = std::to_string(diff) + result;
  }

  // Removing leading zeros from the result
  while (result.length() > 1 && result[0] == '0') {
    result = result.substr(1);
  }

  return result;
}

std::string multiplyBaseB(const std::string& x, const std::string& y, int B) {
  size_t len_x = x.length();
  size_t len_y = y.length();

  // This will store the result as a series of intermediate sums
  std::vector<int> result(len_x + len_y, 0);

  // Multiply each digit of x with every digit of y
  for (size_t i = 0; i < len_x; ++i) {
    for (size_t j = 0; j < len_y; ++j) {
      result[i + j + 1] += (x[len_x - 1 - i] - '0') * (y[len_y - 1 - j] - '0');
    }
  }

  // Handle carries and remainders for base B
  for (size_t i = result.size() - 1; i > 0; --i) {
    result[i - 1] += result[i] / B;
    result[i] %= B;
  }

  // Convert the result to a string
  std::string result_str = "";
  for (size_t i = 0; i < result.size(); ++i) {
    result_str += std::to_string(result[i]);
  }

  // Remove leading zeros
  while (result_str.length() > 1 && result_str[0] == '0') {
    result_str = result_str.substr(1);
  }

  return result_str;
}

int main() {
  std::string num1, num2;
  int B;
  std::cin >> num1 >> num2 >> B;
  std::cout << addBaseB(num1, num2, B) << " ";                 // Addition
  std::cout << multiplyBaseB(num1, num2, B) << std::endl;      // Multiplication
  return 0;
}
