#include <algorithm>
#include <iostream>
#include <string>

// Function for base B addition
std::string addBaseB(const std::string& num1, const std::string& num2, int B) {
  int len1 = num1.length();
  int len2 = num2.length();
  std::string n1 = num1, n2 = num2;

  // Make the two strings of equal length by prepending zeros
  if (len1 < len2) {
    for (int i = 0; i < len2 - len1; i++) n1 = "0" + n1;
  } else {
    for (int i = 0; i < len1 - len2; i++) n2 = "0" + n2;
  }

  std::string result = "";
  int carry = 0;

  for (int i = n1.length() - 1; i >= 0; i--) {
    int digit1 = n1[i] - '0';
    int digit2 = n2[i] - '0';

    int sum = digit1 + digit2 + carry;

    carry = sum / B;
    sum %= B;

    result = std::to_string(sum) + result;
  }

  if (carry > 0) {
    result = std::to_string(carry) + result;
  }

  return result;
}

// Karatsuba multiplication
std::string karatsubaMultiply(const std::string& x, const std::string& y,
                              int B) {
  // (Implementation as provided above)
}

// Main function
int main() {
  std::string num1, num2;
  int B;
  std::cin >> num1 >> num2 >> B;
  std::cout << addBaseB(num1, num2, B) << " ";                 // Addition
  std::cout << karatsubaMultiply(num1, num2, B) << std::endl;  // Multiplication
  return 0;
}
